1)
https://leetcode.com/problems/build-array-from-permutation/

Java :
class Solution {
    public int[] buildArray(int[] nums) {
        int n=nums.length;
        int[] ans=new int[n];
        for (int i=0;i<=n-1;i++){
          ans[i]=nums[nums[i]];
        }
        return ans;
    }   
}

Python :

class Solution:
    def buildArray(self, nums: List[int]) -> List[int]:
       return [nums[nums[i]]for i in range(len(nums))]

---------------------------------------------------------------------------------------------------------
5)
https://leetcode.com/problems/shuffle-the-array/
Java:
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] result=new int[2*n];
        for(int i=0;i<n;i++){
            result[2*i]=nums[i];
            result[2*i+1]=nums[i+n];
        }
        return result;
    }
}
Python:
class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        result=[]
        for i in range(n):
            result.append(nums[i])
            result.append(nums[i+n])
        return result
------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
2)
https://leetcode.com/problems/concatenation-of-array/

Java :

class Solution {
    public int[] getConcatenation(int[] nums) {
        int n=nums.length;
        int[] ans=new int[2*n];
        for(int i=0;i<n;i++){
            ans[i]=nums[i];
            ans[i+n]=nums[i];
        }
        return ans;
    }
}

Python :
class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        return nums+nums

------------------------------------------------------------------------------------------
3)
https://leetcode.com/problems/running-sum-of-1d-array/
Java :
class Solution {
    public int[] runningSum(int[] nums) {
       int n=nums.length;
       int current_sum=0;
       int[] ans=new int[n];
       for(int i=0;i<n;i++){
        current_sum +=nums[i];
        ans[i]=current_sum;
       }
       return ans;
    }
}

Python :
class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        ans=[]
        current_sum=0
        for num in nums:
            current_sum +=num
            ans.append(current_sum)
        return ans

-----------------------------------------------------------------------------
4)
https://leetcode.com/problems/richest-customer-wealth/
Java:

class Solution {
    public int maximumWealth(int[][] accounts) {
        int max_wealth=0;
        for(int[] customer : accounts){
            int wealth=0;
            for(int money:customer){
                wealth +=money;
            }
            max_wealth = Math.max(max_wealth,wealth);
        }
        return max_wealth;
    }
}

Python:
class Solution:
    def maximumWealth(self, accounts: List[List[int]]) -> int:
        return max(sum(customer) for customer in accounts)

--------------------------------------------------------------------------5)
5)https://leetcode.com/problems/shuffle-the-array/
Java:
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] result=new int[2*n];
        for(int i=0;i<n;i++){
            result[2*i]=nums[i];
            result[2*i+1]=nums[i+n];
        }
        return result;
    }
}
Python:
class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        result=[]
        for i in range(n):
            result.append(nums[i])
            result.append(nums[i+n])
        return result
------------------------------------------------------------------------------
6)
https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/
Java:
class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        List<Boolean> result= new ArrayList<>();
        int max=0;
        for(int candy:candies){
           if(candy >  max) max=candy;
        }
        for(int candy:candies){
            result.add(candy+extraCandies >= max);
        }
        return result;
    }
}
Python:
class Solution:
    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:
        max_candies=max(candies)
        result=[]
        for candy in candies:
            result.append(candy+extraCandies >=max_candies)
        return result

-----------------------------------------------------------------------------------------------------------------------------
7)
https://leetcode.com/problems/number-of-good-pairs/

Java :
class Solution {
    public int numIdenticalPairs(int[] nums) {
      int n=nums.length;
      int count=0;
      for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(nums[i]==nums[j]){
                count++;
            }
        }
      } 
      return count; 
    }
}

Python:
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        count=0
        n=len(nums)
        for i in range(n):
            for j in range(i+1,n):
                if nums[i]==nums[j]:
                    count+=1
        return count
--------------------------------------------------------------------------------------------------------------------------
8)https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/
Java:
class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int n=nums.length;
        int[] result=new int[n];
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<n;j++){
                if (nums[j]<nums[i]){
                    count++;
                }
            }
            result[i]=count;
        }
        return result;
    }
}
Python:
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        result=[]
        for i in range(len(nums)):
            count=0
            for j in range(len(nums)):
                if nums[j]<nums[i]:
                    count+=1
            result.append(count)
        return result
-----------------------------------------------------------------------------------------------------------------------------
9)https://leetcode.com/problems/create-target-array-in-the-given-order/
Java:
class Solution {
    public int[] createTargetArray(int[] nums, int[] index) {
        int n=nums.length;
        List<Integer> targetList=new ArrayList<>();
        for(int i=0;i<n;i++){
            targetList.add(index[i],nums[i]);
        }
        int[] target=new int[targetList.size()];
        for(int i=0;i<target.length;i++){
            target[i]=targetList.get(i);
        }
        return target;

    }
}
Python:
class Solution:
    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:
        target=[]
        for i in range(len(nums)):
            target.insert(index[i],nums[i])
        return target
----------------------------------------------------------------------------------------------------------------------------------
10)
https://leetcode.com/problems/check-if-the-sentence-is-pangram/
Java:
class Solution {
    public boolean checkIfPangram(String sentence) {
        Set<Character> letters=new HashSet<>();
        for(char c:sentence.toCharArray()){
            letters.add(c);
        }
        return letters.size()==26;
    }
}
Python:
class Solution:
    def checkIfPangram(self, sentence: str) -> bool:
        return len(set(sentence))==26
-------------------------------------------------------------------------------------------------------------------------------

11)
https://leetcode.com/problems/count-items-matching-a-rule/
Java:
class Solution {
    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
        int index;
        if(ruleKey.equals("type")){
            index=0;
        }else if(ruleKey.equals("color")){
            index=1;
        }else{
            index=2;
        }
        int count=0;
        for(List<String> item : items){
            if(item.get(index).equals(ruleValue)){
                count++;
            }
        }
        return count;
    }
}
------------------------------------------------------------------------------------------------------
12)
https://leetcode.com/problems/find-the-highest-altitude/
Java
class Solution {
    public int largestAltitude(int[] gain) {
        int altitude=0;
        int max_altitude=0;
        for(int g:gain){
            altitude +=g;
            max_altitude=Math.max(max_altitude,altitude);
        }
        return max_altitude;
    }
}
-----------------------------------------------------------------------------------------------
13)
https://leetcode.com/problems/flipping-an-image/

Python:
class Solution:
    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:
        for row in image:
            n=len(row)
            for i in range((n+1)//2):
                #swap and invert the ith and n-1-i th 
                row[i],row[n-1-i]=1-row[n-1-i],1-row[i]
        return image

