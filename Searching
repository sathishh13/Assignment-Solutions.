1)
https://leetcode.com/problems/sqrtx/
Java:
class Solution {
    public static int mySqrt(int x) {
        if (x < 2) return x;

        int left = 1, right = x / 2;
        int ans = 0;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            long square = (long) mid * mid;

            if (square == x) {
                return mid;
            } else if (square < x) {
                ans = mid;  // potential answer
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return ans;
    }
}
--------------------------------------------------------------------------------------------
2)
https://leetcode.com/problems/guess-number-higher-or-lower/
java:
// The guess API is defined in the parent class GuessGame:
// int guess(int num);

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int left = 1, right = n;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int res = guess(mid);

            if (res == 0) {
                return mid;
            } else if (res < 0) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return -1; // just in case
    }
}


Python:
class Solution:
    def guessNumber(self, n: int) -> int:
        left,right=1,n
        while  left <= right :
            mid=left+(right-left)//2
            res=guess(mid)
            if res==0:
                return mid
            elif res<0:
                right = mid-1
            else:
                left=mid+1
            
        return -1

------------------------------------------------------------------------------------
3)
https://leetcode.com/problems/first-bad-version/
Java:

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int left = 1, right = n;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (isBadVersion(mid)) {
                right = mid; // First bad version could be mid
            } else {
                left = mid + 1; // First bad version must be after mid
            }
        }

        return left;
    }
}

Python :
def firstBadVersion(n):
    left, right = 1, n
    while left < right:
        mid = left + (right - left) // 2
        if isBadVersion(mid):
            right = mid  # bad version might be mid
        else:
            left = mid + 1  # first bad is after mid
    return left
--------------------------------------------------------------------------------

4)


